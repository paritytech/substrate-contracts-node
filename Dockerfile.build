# Build this node to be put into a Docker image
# Run from the command line with:
# docker build -f Dockerfile.build -t substrate-contracts-node-codespaces .
# docker run --rm -v "$(pwd)":/usr/src/substrate-contracts-node -w /usr/src/substrate-contracts-node substrate-contracts-node-codespaces cargo build --release --target=x86_64-unknown-linux-gnu --locked

FROM rustembedded/cross:x86_64-unknown-linux-gnu AS build

# Install dependencies
RUN apt-get install -y curl build-base gcc unzip

# Install rust toolchain
RUN rustup toolchain install x86_64-unknown-linux-gnu && \
    rustup default x86_64-unknown-linux-gnu && \
    rustup target add x86_64-unknown-linux-gnu && \
    rustup target add wasm32-unknown-unknown && \
    curl https://sh.rustup.rs -sSf | sh -s -- -y && \
    export PATH="$HOME/.cargo/bin:$PATH" && \
    rustup target add x86_64-unknown-linux-gnu

# Install protobuf
RUN apt-get install -y unzip curl && \
    PROTOC_VERSION=$(curl -s "https://api.github.com/repos/protocolbuffers/protobuf/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+') && \
    curl -Lo protoc.zip "https://github.com/protocolbuffers/protobuf/releases/latest/download/protoc-${PROTOC_VERSION}-linux-x86_64.zip" && \
    unzip -q protoc.zip bin/protoc -d /usr/local && \
    chmod a+x /usr/local/bin/protoc && \
    rm -rf protoc.zip

WORKDIR /usr/src


