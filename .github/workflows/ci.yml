name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# common variable is defined in the workflow
# repo env variable doesn't work for PR from forks
env:
  CI_IMAGE: "paritytech/ci-unified:bullseye-1.75.0-2024-01-22-v20240222"

jobs:
  set-image:
    # This workaround sets the container image for each job using 'set-image' job output.
    # env variables don't work for PR from forks, so we need to use outputs.
    runs-on: ubuntu-latest
    outputs:
      CI_IMAGE: ${{ steps.set_image.outputs.CI_IMAGE }}
    steps:
      - id: set_image
        run: echo "CI_IMAGE=${{ env.CI_IMAGE }}" >> $GITHUB_OUTPUT
  fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [set-image]
    container:
      image: ${{ needs.set-image.outputs.CI_IMAGE }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Cargo fmt
        run: cargo +nightly fmt --all -- --check
  build-test-linux:
    name: Build Linux
    runs-on: parity-large
    timeout-minutes: 30
    needs: [set-image]
    container:
      image: ${{ needs.set-image.outputs.CI_IMAGE }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Build and Test Linux
        run: |
          cargo build --release
          cargo test --release --all

  build-macos:
    timeout-minutes: 30
    runs-on: parity-macos
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Set rust version from env file
        run: |
          echo $CI_IMAGE
          RUST_VERSION=$(echo $CI_IMAGE | sed -E 's/.*ci-unified:([^-]+)-([^-]+).*/\2/')
          echo $RUST_VERSION
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@1ccc07ccd54b6048295516a3eb89b192c35057dc # master from 12.09.2024
      - name: Install protobuf
        run: brew install protobuf
      - name: Install rust ${{ env.RUST_VERSION }}
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          cache: false
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown,aarch64-apple-darwin,x86_64-apple-darwin
          components: cargo, clippy, rust-docs, rust-src, rustfmt, rustc, rust-std
      - name: cargo info
        run: |
          echo "######## rustup show ########"
          rustup show
          echo "######## cargo --version ########"
          cargo --version
      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          cache-on-failure: true
          cache-all-crates: true
      - name: Run cargo build
        run: |
          # rustup component add rust-src rustfmt
          # rustup target add wasm32-unknown-unknown aarch64-apple-darwin
          time cargo build --release --target aarch64-apple-darwin
          # rustup target add x86_64-apple-darwin
          time cargo build --release --target x86_64-apple-darwin
          mkdir -p ./artifacts/substrate-contracts-node-mac/
          lipo  ./target/x86_64-apple-darwin/release/substrate-contracts-node \
                ./target/aarch64-apple-darwin/release/substrate-contracts-node  \
                -create -output ./artifacts/substrate-contracts-node-mac/substrate-contracts-node
